"""taxonomical_models

Revision ID: 0003
Revises: 0002_rename_metadata
Create Date: 2025-11-01 22:50:01.375009

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0003'
down_revision: Union[str, Sequence[str], None] = '0002_rename_metadata'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('taxonomy',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('node_type', sa.String(), nullable=False),
    sa.Column('parent_id', sa.UUID(), nullable=True),
    sa.Column('path', sa.String(), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['taxonomy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_taxonomy_node_type'), 'taxonomy', ['node_type'], unique=False)
    op.create_index(op.f('ix_taxonomy_parent_id'), 'taxonomy', ['parent_id'], unique=False)
    op.create_index(op.f('ix_taxonomy_path'), 'taxonomy', ['path'], unique=False)
    op.create_table('user_taxonomy_stats',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('taxonomy_id', sa.UUID(), nullable=False),
    sa.Column('questions_attempted', sa.Integer(), nullable=False),
    sa.Column('questions_correct', sa.Integer(), nullable=False),
    sa.Column('total_score', sa.Numeric(), nullable=False),
    sa.Column('max_possible_score', sa.Numeric(), nullable=False),
    sa.Column('average_score_percent', sa.Numeric(), nullable=False),
    sa.Column('first_attempt_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_attempt_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.ForeignKeyConstraint(['taxonomy_id'], ['taxonomy.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'taxonomy_id', name='uq_user_taxonomy_stats')
    )
    op.create_index(op.f('ix_user_taxonomy_stats_taxonomy_id'), 'user_taxonomy_stats', ['taxonomy_id'], unique=False)
    op.create_index(op.f('ix_user_taxonomy_stats_user_id'), 'user_taxonomy_stats', ['user_id'], unique=False)
    op.create_table('question_taxonomy',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('question_id', sa.UUID(), nullable=False),
    sa.Column('taxonomy_id', sa.UUID(), nullable=False),
    sa.Column('relevance_score', sa.Numeric(), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.ForeignKeyConstraint(['taxonomy_id'], ['taxonomy.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('question_id', 'taxonomy_id', name='uq_question_taxonomy')
    )
    op.create_index(op.f('ix_question_taxonomy_question_id'), 'question_taxonomy', ['question_id'], unique=False)
    op.create_index(op.f('ix_question_taxonomy_taxonomy_id'), 'question_taxonomy', ['taxonomy_id'], unique=False)
    # Drop association/child tables before their parents to avoid FK dependency errors
    op.drop_index(op.f('ix_question_topics_qid'), table_name='question_topics')
    op.drop_table('question_topics')
    op.drop_table('question_chapters')
    op.drop_table('topic_associations')
    op.drop_table('chapters')
    op.drop_table('topics')
    op.drop_table('subjects')
    op.drop_index(op.f('ix_entity_relationships_source'), table_name='entity_relationships')
    op.drop_index(op.f('ix_entity_relationships_target'), table_name='entity_relationships')
    op.create_index('idx_entity_relationship_source', 'entity_relationships', ['source_type', 'source_id'], unique=False)
    op.create_index('idx_entity_relationship_target', 'entity_relationships', ['target_type', 'target_id'], unique=False)
    op.create_index(op.f('ix_entity_relationships_relation_type'), 'entity_relationships', ['relation_type'], unique=False)
    op.create_index(op.f('ix_entity_relationships_source_id'), 'entity_relationships', ['source_id'], unique=False)
    op.create_index(op.f('ix_entity_relationships_source_type'), 'entity_relationships', ['source_type'], unique=False)
    op.create_index(op.f('ix_entity_relationships_target_id'), 'entity_relationships', ['target_id'], unique=False)
    op.create_index(op.f('ix_entity_relationships_target_type'), 'entity_relationships', ['target_type'], unique=False)
    op.drop_index(op.f('ix_jwt_revocations_expires_at'), table_name='jwt_revocations')
    op.create_index(op.f('ix_jwt_revocations_user_id'), 'jwt_revocations', ['user_id'], unique=False)
    op.alter_column('media', 'size_bytes',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.drop_index(op.f('ux_media_storage_key'), table_name='media')
    op.create_unique_constraint(None, 'media', ['storage_key'])
    op.drop_index(op.f('ix_oauth_providers_name'), table_name='oauth_providers')
    op.create_unique_constraint(None, 'oauth_providers', ['provider_name'])
    op.create_index(op.f('ix_option_parts_option_id'), 'option_parts', ['option_id'], unique=False)
    op.alter_column('options', 'is_correct',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('options', 'weight',
               existing_type=sa.NUMERIC(),
               nullable=True,
               existing_server_default=sa.text('1'))
    op.drop_index(op.f('ix_permissions_name'), table_name='permissions')
    op.create_unique_constraint(None, 'permissions', ['name'])
    op.create_index(op.f('ix_question_attempt_parts_question_attempt_id'), 'question_attempt_parts', ['question_attempt_id'], unique=False)
    op.add_column('question_attempts', sa.Column('max_score', sa.Numeric(), nullable=True))
    op.create_index(op.f('ix_question_attempts_question_id'), 'question_attempts', ['question_id'], unique=False)
    op.create_index(op.f('ix_question_attempts_quiz_attempt_id'), 'question_attempts', ['quiz_attempt_id'], unique=False)
    op.drop_index(op.f('ux_question_parts_qid_index'), table_name='question_parts')
    op.create_index(op.f('ix_question_parts_question_id'), 'question_parts', ['question_id'], unique=False)
    op.create_index(op.f('ix_question_versions_question_id'), 'question_versions', ['question_id'], unique=False)
    op.alter_column('questions', 'difficulty',
               existing_type=sa.SMALLINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.create_index(op.f('ix_questions_canonical_id'), 'questions', ['canonical_id'], unique=False)
    op.create_index(op.f('ix_quiz_attempts_quiz_id'), 'quiz_attempts', ['quiz_id'], unique=False)
    op.create_index(op.f('ix_quiz_attempts_user_id'), 'quiz_attempts', ['user_id'], unique=False)
    op.create_index(op.f('ix_quiz_versions_quiz_id'), 'quiz_versions', ['quiz_id'], unique=False)
    op.alter_column('refresh_tokens', 'rotate_on_use',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.create_index(op.f('ix_refresh_tokens_user_id'), 'refresh_tokens', ['user_id'], unique=False)
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.create_unique_constraint(None, 'roles', ['name'])
    op.drop_index(op.f('ux_user_oauth_provider_account'), table_name='user_oauth_accounts')
    op.create_index(op.f('ix_user_oauth_accounts_user_id'), 'user_oauth_accounts', ['user_id'], unique=False)
    op.create_index(op.f('ix_user_roles_role_id'), 'user_roles', ['role_id'], unique=False)
    op.create_index(op.f('ix_user_roles_user_id'), 'user_roles', ['user_id'], unique=False)
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'email_verified',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'email_verified',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_index(op.f('ix_user_roles_user_id'), table_name='user_roles')
    op.drop_index(op.f('ix_user_roles_role_id'), table_name='user_roles')
    op.drop_index(op.f('ix_user_oauth_accounts_user_id'), table_name='user_oauth_accounts')
    op.create_index(op.f('ux_user_oauth_provider_account'), 'user_oauth_accounts', ['provider_id', 'provider_account_id'], unique=True)
    op.drop_constraint(None, 'roles', type_='unique')
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=True)
    op.drop_index(op.f('ix_refresh_tokens_user_id'), table_name='refresh_tokens')
    op.alter_column('refresh_tokens', 'rotate_on_use',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.drop_index(op.f('ix_quiz_versions_quiz_id'), table_name='quiz_versions')
    op.drop_index(op.f('ix_quiz_attempts_user_id'), table_name='quiz_attempts')
    op.drop_index(op.f('ix_quiz_attempts_quiz_id'), table_name='quiz_attempts')
    op.drop_index(op.f('ix_questions_canonical_id'), table_name='questions')
    op.alter_column('questions', 'difficulty',
               existing_type=sa.Integer(),
               type_=sa.SMALLINT(),
               existing_nullable=True)
    op.drop_index(op.f('ix_question_versions_question_id'), table_name='question_versions')
    op.drop_index(op.f('ix_question_parts_question_id'), table_name='question_parts')
    op.create_index(op.f('ux_question_parts_qid_index'), 'question_parts', ['question_id', 'index'], unique=True)
    op.drop_index(op.f('ix_question_attempts_quiz_attempt_id'), table_name='question_attempts')
    op.drop_index(op.f('ix_question_attempts_question_id'), table_name='question_attempts')
    op.drop_column('question_attempts', 'max_score')
    op.drop_index(op.f('ix_question_attempt_parts_question_attempt_id'), table_name='question_attempt_parts')
    op.drop_constraint(None, 'permissions', type_='unique')
    op.create_index(op.f('ix_permissions_name'), 'permissions', ['name'], unique=True)
    op.alter_column('options', 'weight',
               existing_type=sa.NUMERIC(),
               nullable=False,
               existing_server_default=sa.text('1'))
    op.alter_column('options', 'is_correct',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.drop_index(op.f('ix_option_parts_option_id'), table_name='option_parts')
    op.drop_constraint(None, 'oauth_providers', type_='unique')
    op.create_index(op.f('ix_oauth_providers_name'), 'oauth_providers', ['provider_name'], unique=True)
    op.drop_constraint(None, 'media', type_='unique')
    op.create_index(op.f('ux_media_storage_key'), 'media', ['storage_key'], unique=True)
    op.alter_column('media', 'size_bytes',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=True)
    op.drop_index(op.f('ix_jwt_revocations_user_id'), table_name='jwt_revocations')
    op.create_index(op.f('ix_jwt_revocations_expires_at'), 'jwt_revocations', ['expires_at'], unique=False)
    op.drop_index(op.f('ix_entity_relationships_target_type'), table_name='entity_relationships')
    op.drop_index(op.f('ix_entity_relationships_target_id'), table_name='entity_relationships')
    op.drop_index(op.f('ix_entity_relationships_source_type'), table_name='entity_relationships')
    op.drop_index(op.f('ix_entity_relationships_source_id'), table_name='entity_relationships')
    op.drop_index(op.f('ix_entity_relationships_relation_type'), table_name='entity_relationships')
    op.drop_index('idx_entity_relationship_target', table_name='entity_relationships')
    op.drop_index('idx_entity_relationship_source', table_name='entity_relationships')
    op.create_index(op.f('ix_entity_relationships_target'), 'entity_relationships', ['target_type', 'target_id'], unique=False)
    op.create_index(op.f('ix_entity_relationships_source'), 'entity_relationships', ['source_type', 'source_id'], unique=False)
    op.create_table('subjects',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='subjects_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('question_topics',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('question_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('topic_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('relevance_score', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name=op.f('question_topics_question_id_fkey')),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], name=op.f('question_topics_topic_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('question_topics_pkey'))
    )
    op.create_index(op.f('ix_question_topics_qid'), 'question_topics', ['question_id'], unique=False)
    op.create_table('topics',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('parent_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['topics.id'], name='topics_parent_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='topics_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('chapters',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('subject_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], name='chapters_subject_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='chapters_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('topic_associations',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('from_topic_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('to_topic_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('association_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('meta_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['from_topic_id'], ['topics.id'], name=op.f('topic_associations_from_topic_id_fkey')),
    sa.ForeignKeyConstraint(['to_topic_id'], ['topics.id'], name=op.f('topic_associations_to_topic_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('topic_associations_pkey'))
    )
    op.create_table('question_chapters',
    sa.Column('question_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('chapter_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapters.id'], name=op.f('question_chapters_chapter_id_fkey')),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name=op.f('question_chapters_question_id_fkey')),
    sa.PrimaryKeyConstraint('question_id', 'chapter_id', name=op.f('question_chapters_pkey'))
    )
    op.drop_index(op.f('ix_question_taxonomy_taxonomy_id'), table_name='question_taxonomy')
    op.drop_index(op.f('ix_question_taxonomy_question_id'), table_name='question_taxonomy')
    op.drop_table('question_taxonomy')
    op.drop_index(op.f('ix_user_taxonomy_stats_user_id'), table_name='user_taxonomy_stats')
    op.drop_index(op.f('ix_user_taxonomy_stats_taxonomy_id'), table_name='user_taxonomy_stats')
    op.drop_table('user_taxonomy_stats')
    op.drop_index(op.f('ix_taxonomy_path'), table_name='taxonomy')
    op.drop_index(op.f('ix_taxonomy_parent_id'), table_name='taxonomy')
    op.drop_index(op.f('ix_taxonomy_node_type'), table_name='taxonomy')
    op.drop_table('taxonomy')
    # ### end Alembic commands ###
